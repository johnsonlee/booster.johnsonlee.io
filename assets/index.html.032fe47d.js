import{r as l,o as i,c as d,d as n,w as t,F as p,e as c,a as e,b as a}from"./app.9958f85a.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const k={},h=c('<h1 id="migrate-to-v5-x" tabindex="-1"><a class="header-anchor" href="#migrate-to-v5-x" aria-hidden="true">#</a> Migrate to v5.x</h1><h2 id="transform-api" tabindex="-1"><a class="header-anchor" href="#transform-api" aria-hidden="true">#</a> Transform API</h2><p>There are no changes to the Transform API and no migration is required.</p><h2 id="task-api" tabindex="-1"><a class="header-anchor" href="#task-api" aria-hidden="true">#</a> Task API</h2><h3 id="variantprocessor" tabindex="-1"><a class="header-anchor" href="#variantprocessor" aria-hidden="true">#</a> VariantProcessor</h3><p>Replace <code>BaseVariant</code> with <code>Variant</code> in the <code>process</code> method:</p>',6),m=e("div",{class:"language-kotlin ext-kt line-numbers-mode"},[e("pre",{class:"language-kotlin"},[e("code",null,[e("span",{class:"token keyword"},"override"),a(),e("span",{class:"token keyword"},"fun"),a(),e("span",{class:"token function"},"process"),e("span",{class:"token punctuation"},"("),a("variant"),e("span",{class:"token operator"},":"),a(" BaseVariant"),e("span",{class:"token punctuation"},")"),a(),e("span",{class:"token punctuation"},"{"),a(`
    `),e("span",{class:"token comment"},"// ..."),a(`
`),e("span",{class:"token punctuation"},"}"),a(`
`)])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br")])],-1),b=e("div",{class:"language-kotlin ext-kt line-numbers-mode"},[e("pre",{class:"language-kotlin"},[e("code",null,[e("span",{class:"token keyword"},"override"),a(),e("span",{class:"token keyword"},"fun"),a(),e("span",{class:"token function"},"process"),e("span",{class:"token punctuation"},"("),a("variant"),e("span",{class:"token operator"},":"),a(" Variant"),e("span",{class:"token punctuation"},")"),a(),e("span",{class:"token punctuation"},"{"),a(`
    `),e("span",{class:"token comment"},"// ..."),a(`
`),e("span",{class:"token punctuation"},"}"),a(`
`)])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br")])],-1),f=c('<h2 id="gradle-compat" tabindex="-1"><a class="header-anchor" href="#gradle-compat" aria-hidden="true">#</a> Gradle Compat</h2><h3 id="agpinterface" tabindex="-1"><a class="header-anchor" href="#agpinterface" aria-hidden="true">#</a> AGPInterface</h3><p>In Booster 5.0.0, all APIs with <code>BaseVariant</code> in <code>AGPInterface</code> have been replaced with <code>Variant</code>, and some <code>Task</code> related APIs have been deprecated. Although they have not been completely deleted, they are not recommended to be used and can basically be considered unusable -- the <code>Task</code> will be null at runtime.</p><h3 id="project-extension" tabindex="-1"><a class="header-anchor" href="#project-extension" aria-hidden="true">#</a> Project Extension</h3><p>Similar to <code>AGPInterface</code>, the <code>Project</code> extension APIs in v4.x is retained as much as possible, the <code>BaseVariant</code> parameter in the method is replaced with <code>Variant</code>, and some methods are refactored.</p><h4 id="getandroid-getandroidornull" tabindex="-1"><a class="header-anchor" href="#getandroid-getandroidornull" aria-hidden="true">#</a> getAndroid / getAndroidOrNull</h4><p>Replace <code>Project.getAndroid(...)</code> with <code>Project.getAndroidComponents()</code>, and replace <code>Project.getAndroidOrNull(...)</code> with <code>Project.getAndroidComponentsOrNull()</code>:</p>',7),g=e("div",{class:"language-kotlin ext-kt line-numbers-mode"},[e("pre",{class:"language-kotlin"},[e("code",null,[e("span",{class:"token keyword"},"val"),a(" android "),e("span",{class:"token operator"},"="),a(" getAndroidOrNull"),e("span",{class:"token operator"},"<"),a("BaseExtension"),e("span",{class:"token operator"},">"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),a(`
`)])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br")])],-1),v=e("div",{class:"language-kotlin ext-kt line-numbers-mode"},[e("pre",{class:"language-kotlin"},[e("code",null,[e("span",{class:"token keyword"},"val"),a(" androidComponents "),e("span",{class:"token operator"},"="),a(" getAndroidComponentsOrNull"),e("span",{class:"token operator"},"<"),a("AndroidComponentsExtension"),e("span",{class:"token operator"},"<"),e("span",{class:"token operator"},"*"),e("span",{class:"token punctuation"},","),a(),e("span",{class:"token operator"},"*"),e("span",{class:"token punctuation"},","),a(),e("span",{class:"token operator"},"*"),e("span",{class:"token operator"},">"),e("span",{class:"token operator"},">"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),a(`
`)])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br")])],-1),_=e("h4",{id:"getresolvedartifactresults",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#getresolvedartifactresults","aria-hidden":"true"},"#"),a(" getResolvedArtifactResults")],-1),x=e("p",null,[a("Replace variant with filter in "),e("code",null,"Project.getResolvedArtifactResults(...)"),a(" method")],-1),A=e("div",{class:"language-kotlin ext-kt line-numbers-mode"},[e("pre",{class:"language-kotlin"},[e("code",null,[e("span",{class:"token keyword"},"val"),a(" result"),e("span",{class:"token operator"},":"),a(" Set"),e("span",{class:"token operator"},"<"),a("ResolvedArtifactResult"),e("span",{class:"token operator"},">"),a(),e("span",{class:"token operator"},"="),a(" project"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"getResolvedArtifactResults"),e("span",{class:"token punctuation"},"("),a(`
    `),e("span",{class:"token boolean"},"true"),e("span",{class:"token punctuation"},","),a(`
    variant
`),e("span",{class:"token punctuation"},")"),a(`
`)])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br")])],-1),w=e("div",{class:"language-kotlin ext-kt line-numbers-mode"},[e("pre",{class:"language-kotlin"},[e("code",null,[e("span",{class:"token keyword"},"val"),a(" result"),e("span",{class:"token operator"},":"),a(" Set"),e("span",{class:"token operator"},"<"),a("ResolvedArtifactResult"),e("span",{class:"token operator"},">"),a(),e("span",{class:"token operator"},"="),a(" project"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"getResolvedArtifactResults"),e("span",{class:"token punctuation"},"("),a(`
    `),e("span",{class:"token boolean"},"true"),e("span",{class:"token punctuation"},","),a(`
    variant`),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"filterByNameOrBuildType"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),a(`
`),e("span",{class:"token punctuation"},")"),a(`
`)])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br")])],-1);function P(R,y){const s=l("Badge"),o=l("CodeGroupItem"),r=l("CodeGroup");return i(),d(p,null,[h,n(s,{text:"v4.x"}),n(r,null,{default:t(()=>[n(o,{title:"Kotlin",active:""},{default:t(()=>[m]),_:1})]),_:1}),n(s,{text:"v5.x"}),n(r,null,{default:t(()=>[n(o,{title:"Kotlin",active:""},{default:t(()=>[b]),_:1})]),_:1}),f,n(s,{text:"v4.x"}),n(r,null,{default:t(()=>[n(o,{title:"Kotlin",active:""},{default:t(()=>[g]),_:1})]),_:1}),n(s,{text:"v5.x"}),n(r,null,{default:t(()=>[n(o,{title:"Kotlin",active:""},{default:t(()=>[v]),_:1})]),_:1}),_,x,n(s,{text:"v4.x"}),n(r,null,{default:t(()=>[n(o,{title:"Kotlin",active:""},{default:t(()=>[A]),_:1})]),_:1}),n(s,{text:"v5.x"}),n(r,null,{default:t(()=>[n(o,{title:"Kotlin",active:""},{default:t(()=>[w]),_:1})]),_:1})],64)}var C=u(k,[["render",P]]);export{C as default};
