import{r as t,o,c,a as s,b as n,d as p,F as l,e as a}from"./app.9958f85a.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const u={},r=a(`<h1 id="finalization-timeoutexception" tabindex="-1"><a class="header-anchor" href="#finalization-timeoutexception" aria-hidden="true">#</a> Finalization TimeoutException</h1><h2 id="the-problem-of-finalizer" tabindex="-1"><a class="header-anchor" href="#the-problem-of-finalizer" aria-hidden="true">#</a> The Problem of Finalizer</h2><p>\u76F8\u4FE1\u5F88\u591A <em>Android</em> \u5F00\u53D1\u8005\u90FD\u89C1\u8FC7\u50CF\u8FD9\u6837\u7684 <em>TimeoutException</em> :</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>java.util.concurrent.TimeoutException: android.content.res.AssetManager.finalize() timed out after 10 seconds
  at android.content.res.AssetManager.destroy(Native Method)
  at android.content.res.AssetManager.finalize(AssetManager.java:603)
  at java.lang.Daemons$FinalizerDaemon.doFinalize(Daemons.java:187)
  at java.lang.Daemons$FinalizerDaemon.run(Daemons.java:170)
  at java.lang.Thread.run(Thread.java:856)
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u901A\u8FC7\u67E5\u770B <em>AOSP</em> \u6E90\u7801\uFF0C\u6211\u4EEC\u5F88\u5BB9\u6613\u5C31\u80FD\u5B9A\u4F4D\u5230\u5F02\u5E38\u53D1\u751F\u5728 <em>Daemons$FinalizerWatchdogDaemon.finalizerTimedOut</em> :</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">finalizerTimedOut</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// The current object has exceeded the finalization deadline; abort!</span>
    <span class="token class-name">String</span> message <span class="token operator">=</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.finalize() timed out after &quot;</span>
            <span class="token operator">+</span> <span class="token class-name">VMRuntime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFinalizerTimeoutMs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token string">&quot; seconds&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">Exception</span> syntheticException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutException</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// We use the stack from where finalize() was running to show where it was stuck.</span>
    syntheticException<span class="token punctuation">.</span><span class="token function">setStackTrace</span><span class="token punctuation">(</span><span class="token class-name">FinalizerDaemon</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Send SIGQUIT to get native stack traces.</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Os</span><span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token class-name">Os</span><span class="token punctuation">.</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">OsConstants</span><span class="token punctuation">.</span><span class="token constant">SIGQUIT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Sleep a few seconds to let the stack traces print.</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">logE</span><span class="token punctuation">(</span><span class="token string">&quot;failed to send SIGQUIT&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OutOfMemoryError</span> ignored<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// May occur while trying to allocate the exception.</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Ideally, we&#39;d want to do this if this Thread had no handler to dispatch to.</span>
    <span class="token comment">// Unfortunately, it&#39;s extremely to messy to query whether a given Thread has *some*</span>
    <span class="token comment">// handler to dispatch to, either via a handler set on itself, via its ThreadGroup</span>
    <span class="token comment">// object or via the defaultUncaughtExceptionHandler.</span>
    <span class="token comment">//</span>
    <span class="token comment">// As an approximation, we log by hand an exit if there&#39;s no pre-exception handler nor</span>
    <span class="token comment">// a default uncaught exception handler.</span>
    <span class="token comment">//</span>
    <span class="token comment">// Note that this condition will only ever be hit by ART host tests and standalone</span>
    <span class="token comment">// dalvikvm invocations. All zygote forked process *will* have a pre-handler set</span>
    <span class="token comment">// in RuntimeInit and they cannot subsequently override it.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">getUncaughtExceptionPreHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">getDefaultUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// If we have no handler, log and exit.</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">logE</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> syntheticException<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Otherwise call the handler to do crash reporting.</span>
    <span class="token comment">// We don&#39;t just throw because we&#39;re not the thread that</span>
    <span class="token comment">// timed out; we&#39;re the thread that detected it.</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dispatchUncaughtException</span><span class="token punctuation">(</span>syntheticException<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>\u4ECE\u6E90\u7801\u91CC\uFF0C\u6211\u4EEC\u53EF\u4EE5\u770B\u5230 <em>finalizerTimedOut</em> \u4F1A\u629B\u51FA <em>UncaughtException</em>\uFF0C\u90A3\u4E3A\u4EC0\u4E48\u4F1A\u8C03\u5230\u8FD9\u513F\u5462\uFF1F\u8BA9\u6211\u4EEC\u7EE7\u7EED\u770B\u6E90\u7801\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">sleepUntilNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// We have been interrupted, need to see if this daemon has been stopped.</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">final</span> <span class="token class-name">Object</span> finalizing <span class="token operator">=</span> <span class="token function">waitForFinalization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>finalizing <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">VMDebug</span><span class="token punctuation">.</span><span class="token function">isDebuggerConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">finalizerTimedOut</span><span class="token punctuation">(</span>finalizing<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>\u539F\u6765\uFF0C<em>FinalizerWatchdogDaemon</em> \u4F1A\u5F02\u6B65\u7B49\u5F85 <em>Finalization</em> \u7ED3\u675F\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">waitForFinalization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>finalizerTimeoutMs <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        finalizerTimeoutMs <span class="token operator">=</span> <span class="token class-name">VMRuntime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFinalizerTimeoutMs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Temporary app backward compatibility. Remove eventually.</span>
        <span class="token constant">MAX_FINALIZE_NANOS</span> <span class="token operator">=</span> <span class="token constant">NANOS_PER_MILLI</span> <span class="token operator">*</span> finalizerTimeoutMs<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> startCount <span class="token operator">=</span> <span class="token class-name">FinalizerDaemon</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span>progressCounter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Avoid remembering object being finalized, so as not to keep it alive.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">sleepForMillis</span><span class="token punctuation">(</span>finalizerTimeoutMs<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Don&#39;t report possibly spurious timeout if we are interrupted.</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getNeedToWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">FinalizerDaemon</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span>progressCounter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> startCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// We assume that only remove() and doFinalize() may take time comparable to</span>
        <span class="token comment">// the finalizer timeout.</span>
        <span class="token comment">// We observed neither the effect of the gotoSleep() nor the increment preceding a</span>
        <span class="token comment">// later wakeUp. Any remove() call by the FinalizerDaemon during our sleep</span>
        <span class="token comment">// interval must have been followed by a wakeUp call before we checked needToWork.</span>
        <span class="token comment">// But then we would have seen the counter increment.  Thus there cannot have</span>
        <span class="token comment">// been such a remove() call.</span>
        <span class="token comment">// The FinalizerDaemon must not have progressed (from either the beginning or the</span>
        <span class="token comment">// last progressCounter increment) to either the next increment or gotoSleep()</span>
        <span class="token comment">// call.  Thus we must have taken essentially the whole finalizerTimeoutMs in a</span>
        <span class="token comment">// single doFinalize() call.  Thus it&#39;s OK to time out.  finalizingObject was set</span>
        <span class="token comment">// just before the counter increment, which preceded the doFinalize call.  Thus we</span>
        <span class="token comment">// are guaranteed to get the correct finalizing value below, unless doFinalize()</span>
        <span class="token comment">// just finished as we were timing out, in which case we may get null or a later</span>
        <span class="token comment">// one.  In this last case, we are very likely to discard it below.</span>
        <span class="token class-name">Object</span> finalizing <span class="token operator">=</span> <span class="token class-name">FinalizerDaemon</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span>finalizingObject<span class="token punctuation">;</span>
        <span class="token function">sleepForMillis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Recheck to make it even less likely we report the wrong finalizing object in</span>
        <span class="token comment">// the case which a very slow finalization just finished as we were timing out.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getNeedToWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">&amp;&amp;</span> <span class="token class-name">FinalizerDaemon</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span>progressCounter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> startCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> finalizing<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>\u770B\u5230\u8FD9\u91CC\uFF0C\u6211\u60F3\u5927\u5BB6\u5DF2\u7ECF\u5F04\u660E\u767D\uFF0C\u4E3A\u4EC0\u4E48\u4F1A\u629B\u51FA <em>TimeoutException</em> \u4E86\uFF0C\u8FD9\u662F\u56E0\u4E3A <em>FinalizerWatchdogDaemon</em> \u4F1A\u7B49\u5F85 <em>FinalizerDaemon.doFinalize()</em> \u7684\u7ED3\u679C\uFF0C\u5982\u679C\u5728 <em>MAX_FINALIZE_NANOS</em> \u65F6\u95F4\u4E4B\u5185\u6CA1\u6709\u5B8C\u6210\uFF0C\u5C31\u4F1A\u629B\u51FA <em>TimeoutException</em>\u3002</p><h2 id="the-root-cause" tabindex="-1"><a class="header-anchor" href="#the-root-cause" aria-hidden="true">#</a> The Root Cause</h2><p>\u4ECE\u6E90\u7801\u4E2D\u6211\u4EEC\u53EF\u4EE5\u770B\u5230\uFF0C<em>Daemons</em> \u542F\u4E86 <em>4</em> \u4E2A <em>Daemon</em> \u7EBF\u7A0B\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Daemons</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Daemon</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">DAEMONS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Daemon</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
            <span class="token class-name">HeapTaskDaemon</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">,</span>
            <span class="token class-name">ReferenceQueueDaemon</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">,</span>
            <span class="token class-name">FinalizerDaemon</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">,</span>
            <span class="token class-name">FinalizerWatchdogDaemon</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Daemon</span> daemon <span class="token operator">:</span> <span class="token constant">DAEMONS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            daemon<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="heaptaskdaemon" tabindex="-1"><a class="header-anchor" href="#heaptaskdaemon" aria-hidden="true">#</a> HeapTaskDaemon</h3>`,15),k=s("em",null,"HeapTaskDaemon",-1),m=s("em",null,"GC",-1),b=s("em",null,"Heap Trimming",-1),d=s("em",null,"Heap Transition",-1),h=s("em",null,"Concurrent GC",-1),g={href:"https://android.googlesource.com/platform/art/+/master/runtime/gc/task_processor.h",target:"_blank",rel:"noopener noreferrer"},f=a(`<h3 id="referencequeuedaemon" tabindex="-1"><a class="header-anchor" href="#referencequeuedaemon" aria-hidden="true">#</a> ReferenceQueueDaemon</h3><p><em>ReferenceQueueDaemon</em> \u8D1F\u8D23\u5C06 <em>FinalizerReference</em> \uFF08\u91CD\u5199\u4E86 <em>finalize()</em> \u65B9\u6CD5\u7684\u7C7B\u5728\u5B9E\u4F8B\u5316\u7684\u65F6\u5019\uFF0C\u4F1A\u88AB <em>FinalizerReference</em> \u5F15\u7528\uFF0C\u5F53\u8BE5\u5B9E\u4F8B\u5177\u6709\u4E14\u4EC5\u6709 <em>FinalizerReference</em> \u5F15\u7528\u5B83\u65F6\uFF0C\u5219\u8BA4\u4E3A\u8BE5\u5BF9\u8C61\u9002\u5408\u88AB <em>GC</em> \u56DE\u6536\uFF09\u5165\u961F\u5230 <em>ReferenceQueue</em> \u4E2D</p><h3 id="finalizerdaemon" tabindex="-1"><a class="header-anchor" href="#finalizerdaemon" aria-hidden="true">#</a> FinalizerDaemon</h3><p><em>FinalizerDaemon</em> \u8D1F\u8D23\u5728 <em>GC</em> \u88AB\u89E6\u53D1\u65F6\uFF0C\u6267\u884C\u88AB <em>FinalizerReference</em> \u5F15\u7528\u7684\u5BF9\u8C61\u7684 <em>finalize</em> \u65B9\u6CD5</p><h3 id="finalizerwatchdogdaemon" tabindex="-1"><a class="header-anchor" href="#finalizerwatchdogdaemon" aria-hidden="true">#</a> FinalizerWatchdogDaemon</h3><p><em>FinalizerWatchdogDaemon</em> \u987E\u540D\u601D\u4E49\uFF0C\u5B83\u5C31\u662F <em>Finalizer</em> \u7684\u300C\u770B\u95E8\u72D7\u300D\uFF0C\u4E00\u65E6\u5728\u89C4\u5B9A\u7684\u65F6\u95F4\u4E4B\u5185\uFF0C\u6CA1\u6709\u7ED9\u5B83\u300C\u5582\u9AA8\u5934\u300D\uFF0C\u5219\u8BA4\u4E3A <em>Finalizer</em> \u8FC7\u7A0B\u88AB\u963B\u585E\u4E86\uFF0C\u5B83\u5C31\u4F1A\u629B\u5F02\u5E38\u4E86\uFF0C\u800C <em>FinalizerDaemon</em> \u5C31\u662F\u7ED9\u5B83\u300C\u5582\u9AA8\u5934\u300D\u7684\u7EBF\u7A0B\u3002</p><h2 id="how-to-solve-it" tabindex="-1"><a class="header-anchor" href="#how-to-solve-it" aria-hidden="true">#</a> How To Solve It?</h2><p>\u4E86\u89E3\u4E86 <em>4</em> \u4E2A <em>Daemon</em> \u7EBF\u7A0B\u7684\u4F5C\u7528\uFF0C\u90A3\u8FD9\u4E2A\u95EE\u9898\u5C31\u597D\u529E\u4E86\uFF0C\u6709\u4EBA\u63D0\u51FA\u628A\u8D85\u65F6\u65F6\u95F4 <em>MAX_FINALIZE_NANOS</em> \u8BBE\u7F6E\u957F\u4E00\u4E9B\u4E0D\u5C31\u884C\u4E86\uFF1F\u6BD4\u5982\uFF1A<em>Integer.MAX_VALUE</em>\uFF0C\u770B\u8D77\u6765\u8C8C\u4F3C\u8FD9\u662F\u6700\u7B80\u5355\u7684\u529E\u6CD5\uFF0C\u771F\u7684\u53EF\u884C\u5417\uFF1F\u8BA9\u6211\u4EEC\u6765\u770B\u770B\u6E90\u7801\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Daemons</span> <span class="token punctuation">{</span>

    <span class="token comment">// This used to be final. IT IS NOW ONLY WRITTEN. We now update it when we look at the command</span>
    <span class="token comment">// line argument, for the benefit of mis-behaved apps that might read it.  SLATED FOR REMOVAL.</span>
    <span class="token comment">// There is no reason to use this: Finalizers should not rely on the value. If a finalizer takes</span>
    <span class="token comment">// appreciable time, the work should be done elsewhere.  Based on disassembly of Daemons.class,</span>
    <span class="token comment">// the value is effectively inlined, so changing the field never did have an effect.</span>
    <span class="token comment">// DO NOT USE. FOR ANYTHING. THIS WILL BE REMOVED SHORTLY.</span>
    <span class="token annotation punctuation">@UnsupportedAppUsage</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token constant">MAX_FINALIZE_NANOS</span> <span class="token operator">=</span> <span class="token number">10L</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token constant">NANOS_PER_MILLI</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u4ECE\u6E90\u7801\u4E2D\uFF0C\u6211\u4EEC\u53EF\u4EE5\u770B\u5230 <em>MAX_FINALIZE_NANOS</em> \u662F\u4E00\u4E2A\u5E38\u91CF\u503C\uFF0C\u6839\u636E\u6211\u4EEC\u5BF9 <em>JVM</em> \u89C4\u8303\u7684\u4E86\u89E3\uFF0C\u5E38\u91CF\u662F\u4E00\u4E2A\u7ACB\u5373\u6570\uFF0C\u5DF2\u7ECF\u88AB\u7F16\u7801\u8FDB\u6307\u4EE4\u4E2D\uFF0C\u5373\u4F7F\u8FD0\u884C\u65F6\u4FEE\u6539\u5B83\uFF0C\u4E5F\u4E0D\u4F1A\u6709\u4EFB\u4F55\u4F5C\u7528\u3002</p><p><em>Booster</em> \u7684\u89E3\u51B3\u65B9\u6848\u662F\u89E3\u51B3\u629B\u51FA\u5F02\u5E38\u7684\u300C\u770B\u95E8\u72D7\u300D\u2014\u2014 \u5728\u5E94\u7528\u542F\u52A8\u540E\uFF0C\u505C\u6389 <em>FinalizerWatchdogDaemon</em> \u7EBF\u7A0B\uFF0C\u8FD9\u6837\u505A\u5BF9\u4E8E <em>APP</em> \u6765\u8BF4\uFF0C\u5E76\u6CA1\u6709\u4EC0\u4E48\u5B9E\u8D28\u6027\u7684\u5F71\u54CD\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> retry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token function">isFinalizerWatchdogDaemonExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> retry <span class="token operator">&lt;</span> <span class="token constant">MAX_RETRY_TIMES</span><span class="token punctuation">;</span> retry<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">final</span> <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.lang.Daemons$FinalizerWatchdogDaemon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">final</span> <span class="token class-name">Field</span> field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;INSTANCE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">final</span> <span class="token class-name">Object</span> watchdog <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token keyword">final</span> <span class="token class-name">Field</span> thread <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;thread&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        thread<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        thread<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>watchdog<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Clearing reference of thread \`FinalizerWatchdogDaemon\` failed&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token keyword">try</span> <span class="token punctuation">{</span>
                            <span class="token keyword">final</span> <span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;stop&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>watchdog<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Interrupting thread \`FinalizerWatchdogDaemon\` failed&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token constant">THREAD_SLEEP_TIME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">InterruptedException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Killing thread \`FinalizerWatchdogDaemon\` failed&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFinalizerWatchdogDaemonExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Killing thread \`FinalizerWatchdogDaemon\` failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Thread \`FinalizerWatchdogDaemon\` does not exist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;FinalizerWatchdogDaemonKiller&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h2 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting Started</h2>`,13),w=s("code",null,"FinalizerDaemon",-1),y=s("em",null,"TimeoutException",-1),v={href:"https://github.com/didi/booster/blob/master/booster-transform-finalizer-watchdog-daemon",target:"_blank",rel:"noopener noreferrer"},z=a(`<div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code>buildscript <span class="token punctuation">{</span>
    ext <span class="token punctuation">{</span>
        kotlin_version <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;1.5.31&quot;</span></span>
        booster_version <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;4.16.3&quot;</span></span>
    <span class="token punctuation">}</span>
    repositories <span class="token punctuation">{</span>
        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">google</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    dependencies <span class="token punctuation">{</span>
        classpath <span class="token string">&#39;com.android.tools.build:gradle:3.5.0&#39;</span>
        classpath <span class="token interpolation-string"><span class="token string">&quot;org.jetbrains.kotlin:kotlin-gradle-plugin:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">kotlin_version</span></span><span class="token string">&quot;</span></span>
        classpath <span class="token interpolation-string"><span class="token string">&quot;com.didiglobal.booster:booster-gradle-plugin:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">booster_version</span></span><span class="token string">&quot;</span></span>

        <span class="token comment">/* \u{1F447}\u{1F447}\u{1F447}\u{1F447} \u5F15\u7528\u8FD9\u4E2A\u6A21\u5757 \u{1F447}\u{1F447}\u{1F447}\u{1F447} */</span>
        classpath <span class="token interpolation-string"><span class="token string">&quot;com.didiglobal.booster:booster-transform-finalizer-watchdog-daemon:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">booster_version</span></span><span class="token string">&quot;</span></span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>`,1);function T(F,x){const e=t("ExternalLinkIcon");return o(),c(l,null,[r,s("p",null,[k,n(" \u7528\u6765\u542F\u52A8\u7528\u4E8E\u5904\u7406 "),m,n(" \u76F8\u5173\u7684\u4EFB\u52A1\uFF0C\u5982\uFF1A"),b,n(", "),d,n(" \u4EE5\u53CA "),h,n("\uFF0C\u8BE6\u89C1\uFF1A"),s("a",g,[n("task_processor.h"),p(e)])]),f,s("p",null,[n("\u4FEE\u590D "),w,n(" \u5BFC\u81F4\u7684 "),y,n(" \u53EA\u9700\u8981\u5F15\u5165 "),s("a",v,[n("booster-transform-finalizer-watchdog-daemon"),p(e)]),n(" \u5373\u53EF\uFF0C\u5982\u4E0B\u6240\u793A\uFF1A")]),z],64)}var E=i(u,[["render",T]]);export{E as default};
